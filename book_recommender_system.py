# -*- coding: utf-8 -*-
"""Book recommender-system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y0ozLUirczWWJmeLisQ_yOkPK6jUW7uR
"""

import numpy as np
import pandas as pd

books=pd.read_csv('/content/Books.csv.zip')
users=pd.read_csv('/content/Users.csv.zip')
ratings=pd.read_csv('/content/Ratings.csv.zip')

books.head()

users.head()

ratings.head()

print(books.shape)
print(users.shape)
print(ratings.shape)

books.isnull().sum()

users.isnull().sum()

ratings.isnull().sum()

books.duplicated().sum()

ratings.duplicated().sum()

users.duplicated().sum()

"""**Popularity based recommender system**"""

ratings_with_name=ratings.merge(books,on='ISBN')

ratings_with_name

number_rating_df=ratings_with_name.groupby('Book-Title').count()['Book-Rating'].reset_index()
number_rating_df.rename(columns={'Book-Rating':'num_ratings'},inplace=True)
number_rating_df

average_rating_df = ratings_with_name.groupby('Book-Title').agg({'Book-Rating': 'mean'}).reset_index()
average_rating_df.rename(columns={'Book-Rating':'avg_rating'}, inplace=True)
print(average_rating_df)

Popularity_df=number_rating_df.merge(average_rating_df,on='Book-Title')
Popularity_df

Popularity_df=Popularity_df[Popularity_df['num_ratings']>=250].sort_values('avg_rating',ascending=False).head(50)

Popularity_df

Popularity_df=Popularity_df.merge(books,on='Book-Title').drop_duplicates('Book-Title')[['Book-Title','Book-Author','Image-URL-M','num_ratings','avg_rating']]

Popularity_df

"""**Collaborating Filtering based Recommender System**"""

ratings_with_name

x=ratings_with_name.groupby('User-ID').count()['Book-Rating']>200
two_hundred_plus_users=x[x].index

filtered_rating=ratings_with_name[ratings_with_name['User-ID'].isin(two_hundred_plus_users)]

filtered_rating

y=filtered_rating.groupby('Book-Title').count()['Book-Rating']>=50
famous_books=y[y].index

famous_books

final_ratings=filtered_rating[filtered_rating['Book-Title'].isin(famous_books)]

final_ratings

pt=final_ratings.pivot_table(index='Book-Title',columns='User-ID',values='Book-Rating')

pt

pt.fillna(0,inplace=True)

pt

from sklearn.metrics.pairwise import cosine_similarity

similarity_scores=cosine_similarity(pt)

similarity_scores

similarity_scores.shape

def recommend(book_name):
  #index fetch
  index=np.where(pt.index==book_name)[0][0]
  similar_items=sorted(list(enumerate(similarity_scores[index])),key=lambda x:x[1],reverse=True)[1:6]

  data=[]
  for i in similar_items:
    item=[]
    temp_df=books[books['Book-Title']==pt.index[i[0]]]
    item.extend(list(temp_df.drop_duplicates('Book-Title')['Book-Title'].values))
    item.extend(list(temp_df.drop_duplicates('Book-Title')['Book-Author'].values))
    item.extend(list(temp_df.drop_duplicates('Book-Title')['Image-URL-M'].values))

    data.append(item)

  return data

recommend("Tuesdays with Morrie: An Old Man, a Young Man, and Life's Greatest Lesson")

import pickle
pickle.dump(Popularity_df,open('popular.pkl','wb'))

pickle.dump(pt,open('pt.pkl','wb'))
pickle.dump(books,open('books.pkl','wb'))
pickle.dump(similarity_scores,open('similarity_scores.pkl','wb'))